#-*-coding:utf-8-*-


# 多任务可以由多进程完成，也可以由一个进程内的多线程完成
# _thread  threading
# 启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行


import time
import threading


def loop():
    print('thread %s is running...' % threading.current_thread().name)
    n = 0
    while n < 5:
        n = n+1
        print("thread %s >>> %s" % (threading.current_thread().name, n))
        time.sleep(1)
    print('thread %s ended' % threading.current_thread().name)


print('thread %s is running' % threading.current_thread().name)
t = threading.Thread(target=loop, name='LoopThread')
t.start()
t.join()
print('thread %s ended.' % threading.current_thread().name)
# 任何进程默认启动一个线程，为主线程，主线程又可以启动新的线程
# threading.current_thread()函数永远返回当前线程的实例
# 主线程实例的名字叫MainThread,子线程名字在创建时指定
# 名字没有任何意义，仅仅打印时显示，不起名字，python会自动命名Thread-1，Thread-2


# Lock
# 多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响
# 多线程中，所有变量都由所有线程共享，so，任何一个遍历都可以被任何一个线程修改
# 线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容改乱了
import time
import threading


# 假定这是你的银行存款
balance = 0


def change_it(n):
    # 先存后取，结果应该为0
    global balance
    balance = balance + n
    balance = balance - n


def run_thread(n):
    for i in range(100000):
        change_it(n)


t1 = threading.Thread(target=run_thread, args=(5,))
t2 = threading.Thread(target=run_thread, args=(8,))
t1.start()
t2.start()
t1.join()
t2.join()
print(balance)
# 线程调度由操作系统决定的，当t1/t2交替执行时，只要循环次数足够多，balance的结果就不一定是0了
# 所以，我们必须确保一个线程在修改balance的时候，别的线程一定不能改
# so,为了确保balance计算正确，就要给change_it()上一把锁
# 直到锁被释放，获得该锁以后才能改
# 同一时刻最多只有一个线程持有该锁，所以不会造成修改的冲突
# 创造一个锁就是通过threading.Lock()来实现


balance = 0
lock = threading.Lock()


def run_thread(n):
    for i in range(100000):
        lock.acquire()  # 先要获取锁：
        try:
            change_it(n)
        finally:
            lock.release()   # 改完了一定要释放锁
#  获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，
#  成为死线程，所以使用try finally来确保锁一定会被释放。
#  锁的好处就是确保了某段关键代码只能由一个线程从头到尾完整地执行。
#  坏处：阻止了多线程并发执行，包含锁的某段代码只能以单线程模式执行，效率下降
#  可以存在多个锁，不同的线程有不同的锁，并试图获取对方持有的锁时，可能会造成死锁，
#  导致多个线程全部挂起，即不能执行，也无法结束，只能靠操作系统强制终止
#  解释器执行代码时，有GIL锁，Global Interpreter Lock,即多线程在Python中只能交替进行，
#  即100个线程跑在100核CPU上，也只能用到1个核
#  python不能利用多线程实现多核任务，但可以通过多进程实现多核任务。
#  多个python进程有各自独立的GIL锁，互不影响。










