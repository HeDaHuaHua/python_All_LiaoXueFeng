#-*-coding:utf-8-*-
# 进程间通信
# process之间需要通信的，操作系统提供很多机制实现进程间的通信
# multiprocessing模块包装了底层的机制，提供Queue、Pipes交换数据


from multiprocessing import Process, Queue
import os
import time
import random


# 写数据进程执行的代码：
def write(q):
    print('Process to write:%s' % os.getpid())
    for value in ['A','B','C']:
        print('Put %s to queue...' % value)
        q.put(value)
        time.sleep(random.random())


# 读数据进程执行的代码：
def read(q):
    print('Process to read:%s' % os.getpid())
    while True:
        value = q.get(True)
        print('Get %s from queue.' % value)


if __name__ == '__main__':
     q = Queue()
     pw = Process(target=write, args=(q,))
     pr = Process(target=read, args=(q,))
     # 启动子进程pw , 写入：
     pw.start()
     # 启动子进程pr, 读取：
     pr.start()
     # 等待pw结束
     pw.join()
     # pr进程是死循环，无法等待结束，只能强行终止：
     pr.terminate()


# windows 没有fork调用，因此，multiprocessing需要模拟出fork的效果
# 父进程所有python对象都必须通过pickle序列化再传到子进程中去，
# 所以，如果multiprocessing在Windows下调用失败，要考虑是不是pickle失败了




