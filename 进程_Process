-*-coding:utf-8-*-


"""
from multiprocessing import Process
import os


# 子进程要执行的代码
def run_proc(name):
    print('Run child process %s (%s)...' % (name, os.getpid()))


if __name__ == '__main__':
    print('Parent process %s.' % os.getpid())
    p = Process(target=run_proc, args=('test',))
    print("Child process will start.")
    p.start()
    p.join()
    print("Child process end.")
"""


# 创建子进程时，需要传入一个执行函数，和函数的参数，创建一个process实例
# 用start方法启动
# 进方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。
# 如果要启动大量的子进程，可以用进程池的方式批量创建子进程

'''
from multiprocessing import Pool
import os
import time
import random


def long_time_task(name):
    print('Run task %s (%s)...'% (name, os.getpid()))
    start = time.time()
    time.sleep(random.random()*3)
    end = time.time()
    print('Task %s runs %0.2f seconds.' % (name, (end - start)))


if __name__ == '__main__':
    print('Parent process %s.' % os.getpid())
    p = Pool(5)  # 这里是限制同时跑的进程最多数的
    for i in range(5):
        p.apply_async(long_time_task, args=(i,))
    print('Waiting for all subprocesses done...')
    p.close()
    p.join()
    print('All subprocesses done.')
'''
#  对Pool对象调用join方法会等待所有子进程执行完毕，
#  调用join之前必须先调用close, 调用close之后就不能继续添加新的process了


# 子进程
# 很多时候，子进程并不是自身，而是一个外部进程，
# 我们创建了子进程后，还需要控制子进程的输入和输出
# subprocess模块
import subprocess


'''
print('$ nslookup www.python.org')
r = subprocess.call(['nslookup', 'www.python.org'])
print('Exit code:', r)
'''


# 如果子进程还需要输入，则可以通过communicate()方法输入
# nslookup命令用于查询DNS记录，查看域名解析是否正常，网络故障的时候用来诊断网络问题
# mx 指 mail exchange 邮件交换记录，指向一个邮件服务器
# 检查mx记录是否存在的一个有用的工具就是nslookup,可以用来查看DNS中的各种数据
print('$ nslookup')
p = subprocess.Popen(['nslookup'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
output, err = p.communicate(b'set q=mx\npython.org\nexit\n')
print(output.decode('gbk'))
print('Exit code:', p.returncode)
