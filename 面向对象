
'''
class Student(object):
    __slots__ = ('name', 'age', 'score', 'set_age')   # 对继承的子类不起作用


def set_age(self, age):    # 定义一个函数作为实例方法
    self.age = age


def set_score(self, score):
    self.score = score


s = Student()
s.name = 'Michal'
print(s.name)


from types import MethodType
s.set_age = MethodType(set_age, s)  # 给实例绑定一个方法
s.set_age(25)  # 调用实例方法
print(s.age)

s2 = Student()
# s2.set_age(20)  # 给一个实例绑定的方法，对另一个实例是不起作用的

#  给class绑定方法
Student.set_score = set_score  # 注意哦，这里没有括号
s.set_score(100)
s2.set_score(99)

print(s.score)
print(s2.score)
'''


'''
class Student(object):

    def get_score(self):
        return self._score

    def set_score(self,value):
        if not isinstance(value,int):
            raise ValueError('score must be an int')
        if value < 0 or value > 100:
            raise ValueError('score must between 0-100')
        self._score = value


s = Student()
s.set_score(90)
s.get_score()

# s.set_score(9999)
'''
# 为了解决上面这种方法太麻烦， 既能检查参数，又能用类似属性这样简单方式访问类变量


'''
class Student(object):

    @property
    def score(self):
        return self._score

    @score.setter
    def score(self, value):
        if not isinstance(value, int):
            raise ValueError('score must be int')
        if value < 0 or value > 100:
            raise ValueError('socre must between 0-100')
        self._score = value

    @property
    def birth(self):  # 可读可写属性
        return self._birth

    @birth.setter
    def birth(self, birth):
        self._birth = birth

    @property
    def age(self):  # 只读属性
        return 2015 - self._birth


s = Student()
s.score = 88
print(s.score)

# s.score = 9999


class Screen(object):
    @property
    def width(self):
        return self._width
    @width.setter
    def width(self,value):
        self._width = value

    @property
    def height(self):
        return self._height

    @height.setter
    def height(self,value):
        self._height = value

    @property
    def resolution(self):
        return self._height * self._width


s = Screen()
s.width = 1024
s.height = 768
print('resolution =', s.resolution)
if s.resolution == 786432:
    print('测试通过!')
else:
    print('测试失败!')
'''


# 多重继承
'''
class Animal(object):
    pass


class RunnableMixIn(object):
    def run(self):
        print('running...')


class FlyableMixIn(object):
    def fly(self):
        print('Flying...')


class Mammal(Animal):
    pass


class Bird(Animal):
    pass


class Dog(Mammal, RunnableMixIn):
    pass


class Bat(Mammal, FlyableMixIn):  #  这就是多重继承 这种设计通常称之为MixIn
    pass


class Parrot(Bird):
    pass


class Ostrich(Bird):
    pass
'''

'''
# 定制类__str
class Student(object):
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return 'Student object (name is :%s)' % self.name

    __repr__ = __str__  # repr 是给开发调试用的  str是给用户看到的


print(Student('Michal'))
s = Student('bart')
print(s)
'''


'''
# __iter__ 如果一个类想用于for循环 该方法返回一个迭代对象
class Fib(object):
    def __init__(self):
        self.a, self.b = 0, 1    # 初始化两个计数器a, b

    def __iter__(self):
        return self    # 实例本身就是迭代对象，故返回自己

    def __next__(self):
        self.a, self.b = self.b, self.a + self.b  # 计算下一个值
        if self.a > 100:     # 退出循环的条件
            raise StopIteration()
        return self.a   # 返回下一个值


# for 循环会不断调用该迭代对象的__next__()方法拿到循环的下一个值，直到遇到StopIteration
for n in Fib():
    print(n)
'''

'''
# __getitem__ 像list那样按照下标取出元素


class Fib(object):
    def __getitem__(self, item): # 这里要对传入的参数判断是int还是切片对象slice
        if isinstance(item, int):
            a, b = 1, 1
            for x in range(item):
                a, b = b, a + b
            return a
        if isinstance(item, slice):
            start = item.start
            stop = item.stop
            if start is None:
                start = 0
            a, b = 1, 1
            L = []
            for x in range(stop):
                if x >= start:
                    L.append(a)
                a, b = b, a+b
            return L


f = Fib()
print(f[10])

# print(list(range(10))[5:10])

print(f[2:5])
print(f[:10])  # 以上只是一个简单的实现，既没有对负数处理，也没有对step处理 [:10:2]
'''

'''
# getattr


class Student(object):
    def __init__(self):
        self.name = 'michal'

    def __getattr__(self, attr):
        if attr == 'score':
            return lambda: 25
            # return 99
        raise AttributeError('\'Student\'object has no attribute\'%s\'' % attr)


s = Student()
print(s.name)
print(s.score())
'''

'''
# __call__


class Student(object):
    def __init__(self, name):
        self.name = name

    def __call__(self):  # 可以直接对实例进行调用
        print('My name is %s.' % self.name)


s = Student('michal')
s()

# __call__() 还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样。
# 所以可以把对象当函数，把函数当对象。
# 能被调用的对象就是一个Callable对象

print(callable(Student('bart')))

print(callable((max)))

print(callable([1, 2, 3]))

print(callable('str'))

print(callable(None))
'''
'''
# 使用枚举类


from enum import Enum, unique


# month 类型的枚举类  Month.Jan来引用一个常量
Month = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))

for name, member in Month.__members__.items():
    print(name, '->', member, ',', member.value)


@unique   # 装饰器可以帮助我们检查没有重复值
class Weekday(Enum):
    Sun = 0
    Mon = 1
    Tue = 2
    Wed = 3
    Thu = 4
    Fri = 5
    Sat = 6


day1 = Weekday.Sun
print(day1)
print(Weekday.Mon.value)

for name, member in Weekday.__members__.items():
    print(name, '->', member, '->', member.value)
'''

'''
from enum import Enum, unique


@unique
class Gender(Enum):
    Male = 0
    Female = 1


class Student(object):
    def __init__(self, name, gender):
        self.name = name
        self.gender = gender


# 测试:
bart = Student('Bart', Gender.Male)
if bart.gender == Gender.Male:
    print('测试通过!')
else:
    print('测试失败!')
'''


#  使用元类 type()

class Hello(object):
    def hello(self, name='world'):
        print('Hello, %s.' % name)


h = Hello()    # h 是一个实例
h.hello()
print(type(Hello))   # <class 'type'>  type函数可以查看一个类型或变量的类型
print(type(h))       # <class 'hello.Hello'>


def fn(self, name='world'):  # 先定义函数
    print('Hello,%s' % name)


Hello = type('Hello', (object,), dict(hello=fn))  # 创建Hello class


# 先定义metaclass，就可以创建类，最后创建实例。
# metaclass 运行创建类或者修改类，或者说，把类看成是metaclass创建出来的实例


class listMetaclass(type): # metaclass是类的模板，所以必须从type类型派生
    def __new__(cls, name, bases, attrs):
        attrs['add'] = lambda self, value: self.append(value)
        return type.__new__(cls, name, bases, attrs)


class MyList(list, metaclass=listMetaclass):
    # 指示Python解释器在创建MyList时，要通过ListMetaclass.__new__来创建
    # 在此，我们可以修改类的定义，比如，加上新的方法，然后，返回修改后的定义
    # __new__()方法接收的参数：准备创建的类的对象；类的名字，父类集合，类的方法集合
    pass


L = MyList()
L.add(1)
print(L)

L2 = list()
#  L2.add(1)  #  这里出错，因为普通的list没有add方法


# 需要通过metaclass 来修改类定义的，比如ORM：object Relational Mapping 对象-关系映射
# 就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样写代码更简单，不用直接操作SQL
# 要编写一个ORM框架，所有类只能动态定义

class Field(object):
    def __init__(self, name, column_type):
        self.name = name
        self.column_type = column_type

    def __str__(self):
        return '<%s:%s>' % (self.__class__.__name__, self.name)


class StringField(Field):
    def __init__(self, name):
        super(StringField, self).__init__(name, 'varchar(100)')


class IntegerField(Field):
    def __init__(self, name):
        super(IntegerField, self).__init__(name, 'bigint')


class ModelMetaclass(type):

    def __new__(cls, name, bases, attrs):
        if name == 'Model':
            return type.__new__(cls, name, bases, attrs)
        print('Found model: %s' % name)
        mappings = dict()
        for k, v in attrs.items():
            if isinstance(v, Field):
                print('Found mapping:%s == > %s' % (k, v))
                mappings[k] = v

        for k in mappings.keys():
            attrs.pop(k)

        attrs['__mappings__'] = mappings   # 保存属性和类的映射关系
        attrs['__table__'] = name   # 假设表名和类名一致
        return type.__new__(cls, name, bases, attrs)


class Model(dict, metaclass=ModelMetaclass):

    def __init__(self,**kw):
        super(Model, self).__init__(**kw)  # super()函数是用于调用父类的一个方法，用来解决多重继承问题的

    def __getattr__(self, key):
        try:
            return self[key]
        except KeyError:
            raise AttributeError(r"'Model' object has no attr '%s'" % key)

    def __setattr_(self, key, value):
        self[key] = value

    def save(self):
        fields = []
        params = []
        args = []
        for k, v in self.__mappings__.items():
            fields.append(v.name)
            params.append('?')
            args.append(getattr(self, k, None))

        sql = 'insert into %s (%s) values (%s)' % (self.__table__,','.join(fields), ','.join(params))
        print('SQL:%s' % sql)
        print('ARGS: %s' % str(args))


class User(Model):
    id = IntegerField('id')
    name = StringField('username')
    email = StringField('email')
    password = StringField('password')
# 父类Model和属性类型StringField  IntegerField 是由ORM框架提供的
# 剩下的魔术方法比如save()全部由metaclass自动完成
# metaclass的编写会比较复杂，但ORM的使用者用起来却很简单


#  创建一个实例
u = User(id=12345, name='michal', email='test@orm.org', password='my-pwd')

#   保存到数据库
u.save()
